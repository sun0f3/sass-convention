{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Sass-convention","body":"# VERSION 0.3\r\n## Договоренность в CSS\r\n\r\nВашему вниманию предлагается свод договоренностей по оформлению CSS и верстки\r\nв нашем проекте DOMGEO. Предлагается за основу, взять Яндекс БЭМ и подстроить\r\nих под наш проект.\r\n\r\n### ВСТУПЛЕНИЕ : Почему нам это может быть полезно ?!\r\n\r\n  Сейчас в проекте у нас скопилось много css стилей.\r\n  Они справляются со своей задачей. В данный момент\r\n  основной прием, который нас спасает - это scss вложенность стилей.\r\n\r\n  Из-за чего появляется уже сейчас ряд проблем:\r\n  * мертвые стили\r\n    Один добавил стиль, другой поправил верстку - стиль не удаляется из-за боязни использования стиля где-то еще)\r\n\r\n_**ПРОБЛЕМА**: Невозможно однозначно ответить на вопрос, где еще используется этот стиль_\r\n\r\n  * перекрестная зависимость стилей\r\n    Уже неоднакратно читая css сталкиваюсь с подобными случаями, когда\r\n    - селекторы дублируется и описываются\r\n    - встречаются артефакты непонятной зависимости стилей друго от друга\r\n    - иногда селекторы лежат в разных файлах!!!\r\n    И прочая \"радость\" катастрофически усложняет модификацию и поддержку css в рабочем состоянии.\r\n\r\n    ПРОБЛЕМА: Зомби-эффект. Вроде живо, а как \"дотронешься\" - все разваливается\r\n    ПРОБЛЕМА: Нет однозначного места для описания конкретного стиля\r\n\r\n  * сложность чтения верстки и css\r\n    Видя структуру\r\n      .tabs.properties\r\n        .list\r\n          %span\r\n      Нельзя однозначно понять семантику оформления\r\n      Вопросы\r\n\r\n      * Кто является главным-блоком, относительно которого описаны оформление потомков? (Вложенностью)\r\n      * Или основной блок выше? :)\r\n      * .list это независимый блок или его оформлением занимается .tabs? а может .properties?\r\n      * Что делает стиль .properties?\r\n      * .properties уточняет стиль .tabs? А если уточняет, то где искать оформление .tabs (в каком файле)?\r\n      * js обслуживает .tabs и если да, где он лежит?\r\n      * Вы уверены что это тот же .tabs что и на другой странице?\r\n\r\n      Чтобы модифицировать оформление, верстку потребуется потратить больше времени.\r\n      Мы скорее не отвечаем на эти вопросы, поэтому верстку мы трогать не будем (вдруг полетит стиль, еще хуже js :)\r\n      стили не всегда понятно где лежат, поэтому мы напишем свои заново, увы.\r\n      Надо признать иногда мы так поступаем, тк действительно нет времени разобраться в неструктурированном css, js\r\n      А нужно сделать сейчас. Так появляются \"разбитые окна\". За несколько подходов разными разработчиками\r\n      код становится \"зомби\".\r\n\r\n      ПРОБЛЕМА: Сложность внесения изменения стилей.\r\n      ПРОБЛЕМА: Только ухудшение семантики css\r\n      ПРОБЛЕМА: Рефакторинг будет стоить очень дорого по времени >> написать с нуля.\r\n\r\n  * не использование повторяемых стилей.\r\n    Каждом раздел (app,agency,hq) должен выглядеть целостно. Это достигается за счет единого стиля оформления.\r\n    Есть набор базовых классов css, которые должны использоваться при верстке очередной страницы раздела.\r\n    Мы этим не пользуемся, точнее мы даже не знаем какие классы уже написаны, чтобы начать их использовать.\r\n    Причиной является непонимание, где описаны уже созданные базовые классы.\r\n\r\n    ПРОБЛЕМА: Нет единообразного оформления\r\n    ПРОБЛЕМА: Нет возможности менять оформление сразу для всего раздела за счет изменения базовых классов\r\n    ПРОБЛЕМА: Не испоьзование наработанных стилей.\r\n    ПРОБЛЕМА: Отстутствие тенденции к оформлению css, для устранение вышеописанных проблем. Отсутсвие струкутры (convetions)\r\n    ПРОБЛЕМА: Дублирование css, увеличение время на верстку\r\n\r\n  * классы css для конкретной страницы становятся глобальными\r\n#### ПЕЧАЛЬНЫЙ ВЫВОД\r\n\r\n  Подобные проблемы усугубляются еще тем, что над css работаем все мы по немножку. Каждый делает как ему удобнее, а часто как\r\n  быстрее. При этом забывается, что \"завтра\" нам придется изменить дополнить оформление и скорее это будет делать уже другой человек.\r\n  И чтобы добиться несложного результата, придется потратить кусок нервов, начать верить в Бога, и затратить времени в N раз больше\r\n  чем стоит задача.\r\n\r\n  Давайте не будем наступать на php-грабли, а будем на стороне добра\r\n  Вашему вниманию предлагается свод Договоренностей, которые должны устранить вышеописанные проблемы\r\n  и сделать нашу жизнь слаще и приятнее. :)\r\n\r\n\r\n### структура разделов app, agency, hq\r\n\r\n\r\n    |-- shared\r\n    |   |-- *.scss\r\n    |-- widgets\r\n    |   |-- *.scss\r\n    |-- pages\r\n    |   |-- *.scss\r\n    `-- *.scss\r\n\r\n\r\nshared/\r\n  Хранит общеиспользуемые классы для данного раздела.\r\n  Те, которые вы можете использовать на своей странице для сохранения единого стиля оформления.\r\n  Имя файла совпадает с префиксом классов, описанных в нем\r\n  Пример: buttons.scss, columns.scss, flash.scss, errors.scss\r\n  flash.scss может содержать стили для .flash, .flash_error, .flash_notice итд\r\n\r\nwidgets/\r\n  Хранит стили для повторяемых компонентов, которые могут быть использованны на разных страницах\r\n  Widget-ом будем называет повторяемые визуальные блоки со сложной версткой внутри (условно вложенность >1)\r\n  Еще одним признаком wdiget-а является - возможность подключить js (или уже существующий js класс), который\r\n  обслуживает поведение данного блока, как самостоятельного компонента.\r\n  Примеры: chart.scss, map.scss, tips.scss, menu.scss, tab.scss\r\n\r\npages/\r\n  Хранит стили для конкретной страницы(action) или всего раздела(controller).\r\n  Хранит оформление стилей для элементов конкретной страницы.\r\n  Может видоизменять вид shared и widgets элементы для данной страницы.\r\n  Пример: users.scss, users_show.scss # users_controller.rb\r\n\r\n*.scss\r\n  Попадает пока все что не поподает под описание shared, widgets, pages\r\n  Возможно сюда может попасть оформление для форм.\r\n  Внизу страницы описаны предложения для обсуждения.\r\n\r\n\r\n## БЭМ\r\n  Cтили определяются классом(class). Это позволяет достичь использование повторно\r\n  компонента как на разных страницах, так и на одной страницы использовать нескольких одноименных виджетов.\r\n\r\n### Именование pages\r\n    Префикс: p-\r\n##### * Варианты именования\r\n  Необходимо вместе выбрать общий формат именования\r\n        1) p-controller_name__action_name (\r\n            плюс: дефолтный БЭМ.\r\n            минус: эстетика, action как модификатор - action-ы скорее независимы чeм зависимы\r\n        2) p-controller_name-action_name\r\n            плюс: дефолт по БЭМу.\r\n            минус: эстетика\r\n        3) p-controller-name-action-name\r\n            плюс: использование одного разделителя.\r\n            минус: неоднозначность в имени\r\n        4) p-controller-name--action-name\r\n            плюс: использование одного разделителя.\r\n            минус: отсутствуют на первый взгляд\r\n\r\n##### * Название файла\r\n        ./pages/controller_name.scss\r\n        ./pages/controller_name_action_name.scss\r\n\r\n      Пример\r\n        hq/pages/users.scss       => .p-users {}\r\n        hq/pages/users_show.scss  => .p-users-show {}\r\n\r\n##### * Замечания\r\n        1) .p-users-show может находиться в файле  {namespace}/pages/users.scss если он занимает мало места\r\n        2) .p-users может использоваться для всех action-ов, в случае простой верстки.\r\n        3) Иначе .p-users определяет стиль для index.\r\n\r\n\r\n### Именование widgets\r\n  Префикс w-\r\n  имя         WidgetName\r\n  JS class    WidgetNameWidget\r\n  Css class\r\n\r\n##### * Варианты именования\r\n        1) w-widget_name__modifcator\r\n          плюс: дефолт по БЭМу.\r\n          минус: эстетика двух разделителей\r\n        2) w-widget-name--modificator\r\n          плюс: использование одного разделителя.\r\n          минус: нет\r\n\r\n##### * Название файла\r\n        ./widgets/widget_name.scss\r\n        ./widgets/widget_name_modificator.scss\r\n\r\n        Пример\r\n        agency/widgets/tabs.scss => .w-tabs {} .w-tabs__vertical {}\r\n\r\n##### * Оформление модификаторов\r\n        ./pages/tabs.scss\r\n          .w-tabs { ... }\r\n\r\n          //vertical\r\n          .w-tabs__vetical {\r\n            @extend .w-tabs;\r\n            ...\r\n          }\r\n##### * modificator VS .p-page { .w-widget {...} }\r\n        Для конкретной страницы вы можете видоизменить конкретный виджет\r\n\r\n        //Так\r\n        .p-example_page {\r\n          .w-widget {\r\n            color:red;\r\n          }\r\n        }\r\n        Это нормально\r\n        Но если Вам приходится повторно делать модификацию этого виджета еще на нескольких других страницах\r\n        Это сигнал, что следует добавить модификатор к виджету\r\n\r\n        //Так\r\n        ./widgets/widget/scss\r\n        .w-widget{ ... }\r\n\r\n        .w-widget__red {\r\n          @extend .w-widget;\r\n          color: red;\r\n        }\r\n\r\n##### * Замечания\r\n        1) .w-tabs__vertical хранится в файле {namespace}/widgets/tabs.scss\r\n        2) .w-tabs__vertical возможно хранить в файле {namespace}/widgets/tabs_vertical.scss\r\n        Если модификатор занимает много место.\r\n        Но скорее это сигнал, что нужно создать отдельный виджет или пересмотреть верстку виджета.\r\n        Открытый Вопрос: @extend класса из другого файла, возможно ли это?\r\n\r\n##### * ОПЦИОНАЛЬНЫЕ ДОГОВОРЕННОСТИ И ОТКРЫТЫЕ ВОПРОСЫ\r\n\r\n ?Стили для формы?\r\n\r\n Набор стилей для форм в разделе тоже хочется иметь ограниченное число и выдержанные в едином стиле\r\n Пока они лежат в корне папки (hq/propery_form)\r\n общие виды форм можно класть в файл shared/forms.scss\r\n Можно формы класть в контейнер с префиксом f- (f-property, f-inline, f-default, f-horizontal)\r\n Можно выделить под них папку {namespace}/forms\r\n\r\n ?b-block-name?\r\n На конкретной странице p-name скорее всего у нас могут появляться уникальные блоки\r\n со сложной вложенностью и конкретным визуальным оформлением, помимо виджетов.\r\n Нет смысла их выносить в ./widgets/\r\n Однака некая пометка что это блок контейнер для визуального блока упростила разбор стиля\r\n Можно это делать блоком с префиксом b-\r\n\r\n Пример\r\n  .p-users-show\r\n    %h1 Вася\r\n    .b-suggetsion\r\n      .title\r\n      .description\r\n      .price\r\n    .two_columns\r\n      .left\r\n      .right\r\n\r\nНаличие префикса говорит что\r\n+ это блок и стили для .title, .description описаны отностильно него\r\n+ блок .b-suggestion определен в /pages/users_show.scss относительно .p-users-show\r\n+ дает возможность отличить .two_columns враппера от блока .b-suggestion за счет префикса\r\n\r\nВнутри блока мы используем удобные нам имена без всяких префиксов, как нам удобно :)\r\n\r\n\r\n====== ПЛЮСЫ ОТ ИСПОЛЬЗОВАНИЯ CONVENTION\r\n\r\n  + DRY использование существующих стилей, возможность их быстро находить и модифицировать\r\n  + Меньше затрата сил на изменения в оформлении сразу всего раздела\r\n  + Легко проводить рефакторинг виджетов, страниц без опасения что \"где-то что-то\" может полететь\r\n  + Легкость чтения кода css и haml\r\n  + Легко искать файл со стилем только увидев его в верстке\r\n  + Уменьшение вложенности в стилях виджетах, блоках, страницах.\r\n    Мы теперь точно знаем родителя отвечающего за оформление поэтому можем легко уходить от большой вложенности >3\r\n    .w-tabs {\r\n      ul {\r\n        li {\r\n          a.name {}\r\n      >>\r\n      .w-tabs {\r\n        a {}\r\n        a.name {}\r\n\r\n   + Возможность установить одноименную связь с JS, которыи обслуживает конкретный виджет (об этом в \"ДОГОВОРЕННОСТИ JS\")\r\n\r\n\r\n===== ИСОПЛЬЗОВАНИЕ id\r\n Написание стилей с использованием id не допускается.\r\n Приоритет стиля id (100) много больше приоритета стиля, использующего класс (10), поэтому\r\n изменить поведение объекта будет очень сложно в другом стиле.\r\n\r\n id использутся только для поиска элементов в JS\r\n","google":"","tagline":"rails-sass-convention"}